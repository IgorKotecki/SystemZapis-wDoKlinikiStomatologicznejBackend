// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SystemZapisowDoKlinikiApi.Models;

#nullable disable

namespace SystemZapisowDoKlinikiApi.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    partial class ClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Polish_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApointmentInformation", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("Appointment_id");

                    b.Property<int>("AdditionalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("Additional_information_id");

                    b.HasKey("AppointmentId", "AdditionalInformationId")
                        .HasName("Apointment_informations_pk");

                    b.HasIndex("AdditionalInformationId");

                    b.ToTable("Apointment_informations", (string)null);
                });

            modelBuilder.Entity("AppointmentsService", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("Appointment_id");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int")
                        .HasColumnName("Services_id");

                    b.HasKey("AppointmentId", "ServicesId")
                        .HasName("Appointments_services_pk");

                    b.HasIndex("ServicesId");

                    b.ToTable("Appointments_services", (string)null);
                });

            modelBuilder.Entity("RoleServicePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("RoleId", "ServiceId")
                        .HasName("PK__Role_Ser__95E9BE46E4746543");

                    b.HasIndex("ServiceId");

                    b.ToTable("Role_Service_Permissions", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.AdditionalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyEn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasDefaultValue("")
                        .HasColumnName("body_en");

                    b.Property<string>("BodyPl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("body_pl");

                    b.HasKey("Id")
                        .HasName("Additional_information_pk");

                    b.ToTable("Additional_information", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorBlockId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_block_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("Appointment_pk");

                    b.HasIndex("DoctorBlockId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointment", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.DaySchemeTimeBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorUserId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_User_id");

                    b.Property<TimeOnly>("JobEnd")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasColumnName("job_end");

                    b.Property<TimeOnly>("JobStart")
                        .HasPrecision(0)
                        .HasColumnType("time(0)")
                        .HasColumnName("job_start");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int")
                        .HasColumnName("week_day");

                    b.HasKey("Id")
                        .HasName("Day_scheme_time_block_pk");

                    b.HasIndex("DoctorUserId");

                    b.ToTable("Day_scheme_time_block", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Doctor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("img_path");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("specialization");

                    b.HasKey("UserId")
                        .HasName("Doctor_pk");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.DoctorBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorUserId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_User_id");

                    b.Property<int>("TimeBlockId")
                        .HasColumnType("int")
                        .HasColumnName("Time_block_id");

                    b.HasKey("Id")
                        .HasName("Doctor_block_pk");

                    b.HasIndex("DoctorUserId");

                    b.HasIndex("TimeBlockId");

                    b.ToTable("Doctor_block", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Roles_pk");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("HighPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("high_price");

                    b.Property<decimal>("LowPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("low_price");

                    b.Property<int>("MinTime")
                        .HasColumnType("int")
                        .HasColumnName("min_time");

                    b.HasKey("Id")
                        .HasName("Services_pk");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ServiceDependency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RequiredServiceId")
                        .HasColumnType("int")
                        .HasColumnName("required_service_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id")
                        .HasName("PK__ServiceD__3213E83F4B64088B");

                    b.HasIndex("RequiredServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceDependencies");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ServicesTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.HasKey("Id")
                        .HasName("Services_translation_pk");

                    b.HasIndex("ServiceId");

                    b.ToTable("Services_translation", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.TimeBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime")
                        .HasColumnName("time_end");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime")
                        .HasColumnName("time_start");

                    b.HasKey("Id")
                        .HasName("Time_block_pk");

                    b.ToTable("Time_block", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Tooth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ToothNumber")
                        .HasColumnType("int")
                        .HasColumnName("tooth_number");

                    b.Property<int>("ToothStatusId")
                        .HasColumnType("int")
                        .HasColumnName("Tooth_status_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_id");

                    b.HasKey("Id")
                        .HasName("Tooth_pk");

                    b.HasIndex("ToothStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Tooth", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ToothStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id")
                        .HasName("Tooth_status_pk");

                    b.ToTable("Tooth_status", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ToothStatusTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("ToothStatusId")
                        .HasColumnType("int")
                        .HasColumnName("tooth_status_id");

                    b.HasKey("Id")
                        .HasName("Tooth_status_translation_pk");

                    b.HasIndex("ToothStatusId");

                    b.ToTable("Tooth_status_translation", (string)null);
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("refreshToken");

                    b.Property<DateTime?>("RefreshTokenExpDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("refreshTokenExpDate");

                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("Roles_id");

                    b.Property<string>("Salt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("salt");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("User_pk");

                    b.HasIndex("RolesId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ApointmentInformation", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.AdditionalInformation", null)
                        .WithMany()
                        .HasForeignKey("AdditionalInformationId")
                        .IsRequired()
                        .HasConstraintName("FK_AppInfo_AdditionalInformation");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppInfo_Appointment");
                });

            modelBuilder.Entity("AppointmentsService", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentsServices_Appointment");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .IsRequired()
                        .HasConstraintName("FK_AppointmentsServices_Services");
                });

            modelBuilder.Entity("RoleServicePermission", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_Service_Permissions_Role");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_Role_Service_Permissions_Service");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Appointment", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.DoctorBlock", "DoctorBlock")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_DoctorBlock");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointment_User");

                    b.Navigation("DoctorBlock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.DaySchemeTimeBlock", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Doctor", "DoctorUser")
                        .WithMany("DaySchemeTimeBlocks")
                        .HasForeignKey("DoctorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DaySchemeTimeBlock_Doctor");

                    b.Navigation("DoctorUser");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Doctor", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("SystemZapisowDoKlinikiApi.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Doctor_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.DoctorBlock", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Doctor", "DoctorUser")
                        .WithMany("DoctorBlocks")
                        .HasForeignKey("DoctorUserId")
                        .IsRequired()
                        .HasConstraintName("FK_DoctorBlock_Doctor");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.TimeBlock", "TimeBlock")
                        .WithMany("DoctorBlocks")
                        .HasForeignKey("TimeBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorBlock_TimeBlock");

                    b.Navigation("DoctorUser");

                    b.Navigation("TimeBlock");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ServiceDependency", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Service", "RequiredService")
                        .WithMany("ServiceDependencyRequiredServices")
                        .HasForeignKey("RequiredServiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceDependencies_RequiredService");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Service", "Service")
                        .WithMany("ServiceDependencyServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ServiceDependencies_Service");

                    b.Navigation("RequiredService");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ServicesTranslation", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Service", "Service")
                        .WithMany("ServicesTranslations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Services_translation_Service");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Tooth", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.ToothStatus", "ToothStatus")
                        .WithMany("Teeth")
                        .HasForeignKey("ToothStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Tooth_ToothStatus");

                    b.HasOne("SystemZapisowDoKlinikiApi.Models.User", "User")
                        .WithMany("Teeth")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tooth_User");

                    b.Navigation("ToothStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ToothStatusTranslation", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.ToothStatus", "ToothStatus")
                        .WithMany("ToothStatusTranslations")
                        .HasForeignKey("ToothStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tooth_status_translation");

                    b.Navigation("ToothStatus");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.User", b =>
                {
                    b.HasOne("SystemZapisowDoKlinikiApi.Models.Role", "Roles")
                        .WithMany("Users")
                        .HasForeignKey("RolesId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Roles");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Doctor", b =>
                {
                    b.Navigation("DaySchemeTimeBlocks");

                    b.Navigation("DoctorBlocks");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.DoctorBlock", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.Service", b =>
                {
                    b.Navigation("ServiceDependencyRequiredServices");

                    b.Navigation("ServiceDependencyServices");

                    b.Navigation("ServicesTranslations");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.TimeBlock", b =>
                {
                    b.Navigation("DoctorBlocks");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.ToothStatus", b =>
                {
                    b.Navigation("Teeth");

                    b.Navigation("ToothStatusTranslations");
                });

            modelBuilder.Entity("SystemZapisowDoKlinikiApi.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctor");

                    b.Navigation("Teeth");
                });
#pragma warning restore 612, 618
        }
    }
}
